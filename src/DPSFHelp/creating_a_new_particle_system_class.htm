<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>Creating a New Particle System Class</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?creating_a_new_particle_system_class.htm"; }
  else { parent.quicksync('a6.3'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">Creating a New Particle System Class</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="introduction.htm">Top</a>&nbsp;
     <a href="creating_a_new_particle_vertex_structure.htm">Previous</a>&nbsp;
     <a href="using_dpsf_in_your_project.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p>In addition to inheriting from the DPSF class to obtain its functionality, particle systems must also specify the Particle class and Particle Vertex structure they will use through the use of generics. &nbsp;These will be the particle class and particle vertex structure you defined earlier in this section.</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Initializing the particle system</span></p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 0</span> - You should have already renamed / refactored the particle system classes name when you imported the template into your project. &nbsp;If you have not done this yet, do it now.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 1</span> - First locate the <span style="font-weight: bold;">AutoInitialize()</span> function. &nbsp;The first thing this function does is call the <a href="initializing_a_particle_system.htm">particle initialization function</a> with some default values. &nbsp;You may change these parameter values if you like.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 2</span> - Locate the virtual <span style="font-weight: bold;">UpdateVertexProperties()</span> function. &nbsp;Modify the function's code to copy all of the drawable particle properties from a particle class object into a &nbsp;particle vertex object which is stored in the vertex buffer. &nbsp;The template shows how to do this using the default properties it was created with. &nbsp;This is a bit more complex when using Quad particles, since a Quad has four vertices and the particle's properties need to be copied correctly into all four vertices in the vertex buffer. &nbsp;Also, Quad particles make use of the Index Buffer in order to save memory. &nbsp;Again, the templates show how this should be done.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 3</span> - Locate the overridden <span style="font-weight: bold;">SetEffectParameters()</span> function. &nbsp;This function is used to set any of the global effect (i.e. shader) parameters. &nbsp;The templates show how to set the effect parameters used with the <a href="dpsf_default_effect.htm">DPSF Default Effect</a>, but you may modify these if you wish or if you plan on using your own custom effect file. &nbsp;This function will be called before the particle system is drawn to ensure that the parameter values are correct before rendering.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 4</span> - Locate the overridden <span style="font-weight: bold;">InitializeRenderProperties()</span> function. &nbsp;This function can be used to change any of the RenderState properties before drawing the particle system, such as using alpha blending or enabling depth buffer writes.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Defining the particle system behavior</span></p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 1</span> - Locate the <span style="font-weight: bold;">InitializeParticleProperties()</span> function. &nbsp;This will be the particle initialization function that is used to initialize a new particle's properties when it is added to the particle particle system. &nbsp;Use this function to set all of the particle properties to their starting values. &nbsp;You may create several particle initialization functions if you wish, but they all must follow the <span style="font-weight: bold;">InitializeParticleDelegate</span> prototype, which is:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-weight: bold;">public void FunctionName(Particle cParticle);</span> where Particle is the particle class that the particle system is using for its particles.</p>
<p>&nbsp;</p>
<p>The naming convention DPSF uses for naming particle initialization functions to make them easy to recognize is that the function name starts with InitializeParticle.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 2</span> - Locate the <span style="font-weight: bold;">UpdateParticlePositionUsingVelocity()</span> function. &nbsp;This function is an example of a <a href="what_are_events.htm#particleevents">Particle Event function</a>, and it shows you how to update a particle's properties. &nbsp;You will likely want to create several particle event functions, and they all must follow the <span style="font-weight: bold;">UpdateParticleDelegate</span> prototype, which is:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-weight: bold;">public FunctionName(Particle cParticle, float fElapsedTimeInSeconds);</span> where Particle is the particle class that the particle system is using for its particles.</p>
<p>&nbsp;</p>
<p>The naming convention DPSF uses for naming particle event functions to make them easy to recognize is that the function name starts with UpdateParticle. &nbsp;If you like you may create several smaller particle event functions and put them together later in the LoadParticleSystem() function, or create fewer larger particle event functions; it is personal preference. &nbsp;For example, if you wanted to update a particle's position based on its acceleration and velocity, you could create two separate functions:</p>
<p>&nbsp;</p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #0000ff;">public</span><span style="font-family: 'Courier New'; color: #000000;"> </span><span style="font-family: 'Courier New'; color: #0000ff;">void</span><span style="font-family: 'Courier New'; color: #000000;"> UpdateParticlePositionUsingVelocity(</span><span style="font-family: 'Courier New'; color: #2b91af;">Particle</span><span style="font-family: 'Courier New'; color: #000000;"> cParticle, </span><span style="font-family: 'Courier New'; color: #0000ff;">float</span><span style="font-family: 'Courier New'; color: #000000;"> fElapsedTimeInSeconds)</span></p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #008000;">// Update the Particle's Position according to its Velocity</span></p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cParticle.Position += cParticle.Velocity * fElapsedTimeInSeconds;</span></p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #0000ff;">public</span><span style="font-family: 'Courier New'; color: #000000;"> </span><span style="font-family: 'Courier New'; color: #0000ff;">void</span><span style="font-family: 'Courier New'; color: #000000;"> UpdateParticleVelocityUsingAcceleration(</span><span style="font-family: 'Courier New'; color: #2b91af;">Particle</span><span style="font-family: 'Courier New'; color: #000000;"> cParticle, </span><span style="font-family: 'Courier New'; color: #0000ff;">float</span><span style="font-family: 'Courier New'; color: #000000;"> fElapsedTimeInSeconds)</span></p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #008000;">// Update the Particle's Position according to its Velocity</span></p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cParticle.Velocity += cParticle.Acceleration * fElapsedTimeInSeconds;</span></p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></p>
<p>&nbsp;</p>
<p>Or you could create one larger function:</p>
<p>&nbsp;</p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #0000ff;">public</span><span style="font-family: 'Courier New'; color: #000000;"> </span><span style="font-family: 'Courier New'; color: #0000ff;">void</span><span style="font-family: 'Courier New'; color: #000000;"> UpdateParticlePositionAndVelocityUsingAcceleration(</span><span style="font-family: 'Courier New'; color: #2b91af;">Particle</span><span style="font-family: 'Courier New'; color: #000000;"> cParticle, </span><span style="font-family: 'Courier New'; color: #0000ff;">float</span><span style="font-family: 'Courier New'; color: #000000;"> fElapsedTimeInSeconds)</span></p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #008000;">// Update the Particle Velocity and Position according to Acceleration</span></p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cParticle.Velocity += cParticle.Acceleration * fElapsedTimeInSeconds;</span></p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cParticle.Position += cParticle.Velocity * fElapsedTimeInSeconds;</span></p>
<p><span style="font-family: 'Courier New'; color: #000000;"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></p>
<p>&nbsp;</p>
<p>DPSF uses the first method of creating several smaller functions for the Default particle systems. &nbsp;This method is used because tests show that there is virtually no performance difference between the two methods, even though intuition may suggest that since there are more functions calls the performance of the first method would be worse. &nbsp;Also, by using the first method you can include only the operations you want performed when defining the events in the LoadParticleSystem() function. &nbsp;This could actually increase performance if the method of creating fewer large particle event functions was performing unnecessary operations. &nbsp;In our example given, this could be the case where we weren't actually using acceleration, only velocity, in which case the acceleration operations would still be performed by using the larger function, but could simply not be included in the particle event functions when using the smaller functions (see Step 6).</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 3</span> - Locate the <span style="font-weight: bold;">UpdateParticleSystemTurnEmitterOn()</span> function. &nbsp;This function is an example of a <a href="what_are_events.htm#particlesystemevents">Particle System Event function</a>, and it shows you how to update &nbsp;the particle system's properties. &nbsp;All particle system event functions you create must follow the <span style="font-weight: bold;">UpdateParticleSystemDelegate</span> prototype, which is:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-weight: bold;">public FunctionName(float fElapsedTimeInSeconds);</span></p>
<p>&nbsp;</p>
<p>The naming convention DPSF uses for naming particle system event functions to make them easy to recognize is that the function name starts with UpdateParticleSystem.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 4</span> - Locate the <span style="font-weight: bold;">LoadParticleSystem()</span> function; This is where you will define how the particle system should behave. &nbsp;If you like you may rename / refactor this function, or create several functions to load the particle system with different behaviors. &nbsp;Steps 5 - 7 take place within the LoadParticleSystem() function.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 5</span> - Specify the <span style="font-weight: bold;">ParticleInitializationFunction</span>. &nbsp;The Particle Initialization Function is the function that will be used to initialize new particles when they are added to the particle system. &nbsp;This should be one of the particle initialization functions you created / modified in step 1. &nbsp;If you do not specify a Particle Initialization Function, when new particles are created their properties will have their default values, which should have been specified in the Reset() function of the particle class.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 6</span> - First remove all <span style="font-weight: bold;">ParticleEvents</span> and <span style="font-weight: bold;">ParticleSystemEvents</span> so that if the function is called again later to reload the particle system, the events will not be added twice. &nbsp;This is done by calling the <span style="font-weight: bold;">ParticleEvents.RemoveAllEvents()</span> and <span style="font-weight: bold;">ParticleSystemEvents.RemoveAllEvents()</span> functions. &nbsp;Next, add the the <a href="events.htm">Particle and Particle System Events</a> that you want the particle system to use. &nbsp;The particle events created in step 2 should be added to the <span style="font-weight: bold;">ParticleEvents</span> object, and the particle system events created in step 3 should be added to the <span style="font-weight: bold;">ParticleSystemEvents</span> object. &nbsp;The templates show examples of how to do this to achieve specific effects.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 7</span> - Setup the <a href="particle_emitter.htm">emitter</a> if it you want to use it, such as specifying its position, orientation, and how many particles it should emit per second.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>To see some particle system examples, check out the <span style="font-weight: bold;">DPSF Demo</span> source code to see how the particle systems used in the demo were created.</p>
<p>&nbsp;</p>

</td></tr></table>

</body>
</html>
