<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>Creating New Particle Systems</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?creating_new_particle_systems.htm"; }
  else { parent.quicksync('a5.2'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">Creating New Particle Systems</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="introduction.htm">Top</a>&nbsp;
     <a href="default_particle_systems.htm">Previous</a>&nbsp;
     <a href="extending_the_default_particle.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p>The first thing to do is to <a href="creating_a_new_particle_system_from_a_template.htm">create a new particle system file from a template and import it into your project</a>. &nbsp;Be sure to import one of the template files whose name starts with Default, as those are the templates that inherit the default particle systems' functionality.</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Initializing the particle system</span></p>
<p>&nbsp;</p>
<p>First locate the AutoInitialize() function. &nbsp;The first thing this function does is call the <a href="initializing_a_particle_system.htm">particle system initialization function</a> with some default values. &nbsp;You may change these parameter values if you like.</p>
<p>&nbsp;</p>
<p>Once the particle system is initialized you may change the <span style="font-weight: bold;">Name</span> property of the particle system if you wish.</p>
<p>&nbsp;</p>
<p>From here the <span style="font-weight: bold;">LoadParticleSystem()</span> function is called to define how the particle system and its particles should behave.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Defining the particle system behavior</span></p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 0</span> - You should have already renamed / refactored the particle system classes name when you imported the template into your project. &nbsp;If you have not done this yet, do it now.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 1</span> - Locate the <span style="font-weight: bold;">LoadParticleSystem()</span> function; This is where you will define how the particle system should behave. &nbsp;If you like you may rename / refactor this function, or create several functions to load the particle system with different behaviors.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 2</span> - Specify the <span style="font-weight: bold;">ParticleInitializationFunction</span>. &nbsp;The Particle Initialization Function is the function that will be used to initialize new particles when they are added to the particle system. &nbsp;The default particle systems provide a particle initialization function called <span style="font-weight: bold;">InitializeParticleUsingInitialProperties</span> which initializes new particles based on the settings in the <span style="font-weight: bold;">InitialProperties</span> particle system object. &nbsp;The default templates show how to specify the settings of the InitialProperties object.</p>
<p>&nbsp;</p>
<p>If you like you may define your own function to initialize the particles, allowing full control over the particle's initial property values. &nbsp;Any particle initialization functions you create must follow the <span style="font-weight: bold;">InitializeParticleDelegate</span> prototype, which is:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-weight: bold;">public void FunctionName(Particle cParticle);</span> where Particle is the particle class that the particle system is using for its particles.</p>
<p>&nbsp;</p>
<p>An example of how to do this is shown in the templates by the <span style="font-weight: bold;">InitializeParticleProperties()</span> function.  The naming convention DPSF uses for naming particle initialization functions to make them easy to recognize is that the function name starts with InitializeParticle.  If you do not specify a Particle Initialization Function, when new particles are created their properties will have their default values.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 3</span> - First remove all <span style="font-weight: bold;">ParticleEvents</span> and <span style="font-weight: bold;">ParticleSystemEvents</span> so that if the function is called again later to reload the particle system, the events will not be added twice. &nbsp;Next, add the the <a href="events.htm">Particle and Particle System Events</a> that you want the particle system to use. &nbsp;The templates show examples of how to do this to achieve specific effects. &nbsp;The default classes come with a number of built-in functions to achieve specific effects. &nbsp;All built-in particle event functions begin with UpdateParticle, and all built-in particle system event functions begin with UpdateParticleSystem.</p>
<p>&nbsp;</p>
<p>You may create your own <a href="what_are_events.htm#particleevents">particle event</a> and <a href="what_are_events.htm#particlesystemevents">particle system event</a> functions as well. &nbsp;Examples of how to do this are shown in the templates with the <span style="font-weight: bold;">UpdateParticleFunctionExample()</span> and <span style="font-weight: bold;">UpdateParticleSystemFunctionExample()</span> functions respectively. &nbsp;Any new event functions you create must follow these same function prototypes.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Step 4</span> - Setup the <a href="particle_emitter.htm">emitter</a> if it you want to use it, such as specifying its position, orientation, and how many particles it should emit per second.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>To see some particle system examples, check out the <span style="font-weight: bold;">DPSF Demo</span> source code to see how the particle systems used in the demo were created.</p>
<p>&nbsp;</p>

</td></tr></table>

</body>
</html>
