<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>Defining, Updating, and Drawing a Particle System</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?defining__updating__and_drawing_a_particle_system.htm"; }
  else { parent.quicksync('a7.5'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">Defining, Updating, and Drawing a Particle System</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="introduction.htm">Top</a>&nbsp;
     <a href="initializing_a_particle_system.htm">Previous</a>&nbsp;
     <a href="effect_files_shaders.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p>For this example of defining, updating, and drawing a particle system, I will assume that you are working within a class that inherits from Microsoft.XNA.Framework.Game. &nbsp; This is not a requirement however, it is just for demonstrative purposes. &nbsp;Also, this example assumes that at the top of your file you have included:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #0000ff;">using</span><span style="font-family: 'Courier New'; color: #000000;"> DPSF;</span></p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #0000ff;">using</span><span style="font-family: 'Courier New'; color: #000000;"> DPSF.ParticleSystems;</span></p>
<p>&nbsp;</p>
<p>Otherwise each of the code segments provided below will need to be preceded by DPSF. or DPSF.ParticleSystems.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Defining a new particle system variable</span></p>
<p>&nbsp;</p>
<p>Once a particle system class has been created, you can define a variable to hold it. &nbsp;You will likely want to create this as a class variable so that it can be accessed across several of the class functions. &nbsp;Assuming the particle system class that you created is called FireballParticleSystem, you can create a new variable to hold the particle system using:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #2b91af;">FireballParticleSystem</span><span style="font-family: 'Courier New'; color: #000000;"> mcFireballParticleSystem = </span><span style="font-family: 'Courier New'; color: #0000ff;">null</span><span style="font-family: 'Courier New'; color: #000000;">;</span></p>
<p>&nbsp;</p>
<p>If you want to use the <a href="particle_system_manager.htm">Particle System Manager</a> to update and draw your particle systems, declare and initialize a Particle System Manager variable using:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #2b91af;">ParticleSystemManager</span><span style="font-family: 'Courier New'; color: #000000;"> mcParticleSystemManager = </span><span style="font-family: 'Courier New'; color: #0000ff;">new</span><span style="font-family: 'Courier New'; color: #000000;"> </span><span style="font-family: 'Courier New'; color: #2b91af;">ParticleSystemManager</span><span style="font-family: 'Courier New'; color: #000000;">(); &nbsp; &nbsp; &nbsp; &nbsp;</span>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Defining a new particle system instance</span></p>
<p>&nbsp;</p>
<p>Once you have the variable declared you will want to create a new instance of the particle system. &nbsp;You may decide to do this within the Game classes overridden LoadContent() function, or somewhere else of your choosing. &nbsp;A new instance of the particle system could be created using:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcFireballParticleSystem = </span><span style="font-family: 'Courier New'; color: #0000ff;">new</span><span style="font-family: 'Courier New'; color: #000000;"> </span><span style="font-family: 'Courier New'; color: #2b91af;">FireballParticleSystem</span><span style="font-family: 'Courier New'; color: #000000;">(</span><span style="font-family: 'Courier New'; color: #0000ff;">this</span><span style="font-family: 'Courier New'; color: #000000;">);</span></p>
<p>&nbsp;</p>
<p>If you are not inheriting from the Microsoft.XNA.Framework.Game class, you may pass <span style="font-family: 'Courier New'; color: #0000ff;">null</span> into the constructor instead of <span style="font-family: 'Courier New'; color: #0000ff;">this</span>.</p>
<p>&nbsp;</p>
<p>At this point you may also want to specify the <span style="font-weight: bold;">UpdateOrder</span> and <span style="font-weight: bold;">DrawOrder</span> of the particle system from its default value of zero, but this is not a requirement. &nbsp;The UpdateOrder and DrawOrder only have an effect when using the <a href="particle_system_manager.htm">Particle System Manager</a> to update and draw the particle systems respectively, or when DPSF is set to <a href="inherit_from_drawablegamecomponent.htm">inherit from DrawableGameComponent</a>. &nbsp;Otherwise the particle system will be updated and drawn where ever it is placed within the application's Update() and Draw() functions. &nbsp;The UpdateOrder and DrawOrder of the particle system are one of the few variables that do not get reset when the particle system is initialized or destroyed. &nbsp;You may set the UpdateOrder and DrawOrder by using:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcFireballParticleSystem.UpdateOrder = 100;</span></p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcFireballParticleSystem.DrawOrder = 100;</span></p>
<p>&nbsp;</p>
<p>If you want to use the <a href="particle_system_manager.htm">Particle System Manager</a> to manage the particle system, after creating a new particle system instance, add the particle system to the particle system manager using:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcParticleSystemManager.AddParticleSystem(mcFireballParticleSystem);</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Initializing the particle system</span></p>
<p>&nbsp;</p>
<p>Once a new instance of the particle system has been created you may initialize the particle system using:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcFireballParticleSystem.AutoInitialize(</span><span style="font-family: 'Courier New'; color: #0000ff;">this</span><span style="font-family: 'Courier New'; color: #000000;">.GraphicsDevice, </span><span style="font-family: 'Courier New'; color: #0000ff;">this</span><span style="font-family: 'Courier New'; color: #000000;">.Content);</span></p>
<p>&nbsp;</p>
<p>Where <span style="font-family: 'Courier New'; color: #0000ff;">this</span><span style="font-family: 'Courier New'; color: #000000;">.GraphicsDevice</span> is the Graphics Device that the particle system should draw to, and <span style="font-family: 'Courier New'; color: #0000ff;">this</span><span style="font-family: 'Courier New'; color: #000000;">.Content</span> is the Content Manager that the particle system should use to load texture and effect (i.e. shader) files.</p>
<p>&nbsp;</p>
<p>If you are using the <a href="particle_system_manager.htm">Particle System Manager</a> and want to initialize all of the particle systems that have been added to it, instead of using the above code to initialize just the one particle system, you can initialize all particle systems that are in the particle system manager using:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcParticleSystemManager.AutoInitializeAllParticleSystems(</span><span style="font-family: 'Courier New'; color: #0000ff;">this</span><span style="font-family: 'Courier New'; color: #000000;">.GraphicsDevice, </span><span style="font-family: 'Courier New'; color: #0000ff;">this</span><span style="font-family: 'Courier New'; color: #000000;">.Content);</span></p>
<p>&nbsp;</p>
<p>However, if you only want the particle systems to be initialized once they are needed, it is better to just initialize the ones that you need individually since when the particle system manager's update and draw functions are called it will update and draw all particle system's that are initialized.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Updating the particle system</span></p>
<p>&nbsp;</p>
<p>Once the particle system is initialized you may update the particle system. &nbsp;If you try to update or draw the particle system before it is initialized the functions will simply exit without doing anything; they will not throw any sort of exception or error. &nbsp;Assuming you want to update the particle system at the same pace as the rest of the game, you will likely want to add the following code to the Game classes overridden Update() function:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcFireballParticleSystem.Update((</span><span style="font-family: 'Courier New'; color: #0000ff;">float</span><span style="font-family: 'Courier New'; color: #000000;">)cGameTime.ElapsedGameTime.TotalSeconds); &nbsp; &nbsp; &nbsp; &nbsp;</span></p>
<p>&nbsp;</p>
<p>If you are using the <a href="particle_system_manager.htm">Particle System Manager</a> you can update all of the particle systems that are initialized using:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcParticleSystemManager.UpdateAllParticleSystems((</span><span style="font-family: 'Courier New'; color: #0000ff;">float</span><span style="font-family: 'Courier New'; color: #000000;">)cGameTime.ElapsedGameTime.TotalSeconds);</span></p>
<p>&nbsp;</p>
<p>If DPSF is set to <a href="inherit_from_drawablegamecomponent.htm">inherit from DrawableGameComponent</a>, these function calls will not actually update the particle system. &nbsp;Instead, the particle system will be updated when the base.Update() function is called, as this is when all of the Game Components get updated. &nbsp;However, having these function calls remain here will not cause any problems and will allow the particle systems to still be updated if you set DPSF to not inherit from DrawableGameComponent, but you may remove them if you like.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Drawing the particle system</span></p>
<p>&nbsp;</p>
<p>To draw the particle system, place the following code in the Game classes overridden Draw() function:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcFireballParticleSystem.SetWorldViewProjectionMatrices(mcWorldMatrix, mcViewMatrix, mcProjectionMatrix);</span></p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcFireballParticleSystem.Draw();</span></p>
<p>&nbsp;</p>
<p>Where mcWorldMatrix, mcViewMatrix, and mcProjectionMatrix are the World, View, and Projection matrices respectively. &nbsp;You must set the World, View, and Projection matrices before drawing to ensure that the particle systems are drawn properly according to the camera's properties. &nbsp;Since <a href="particle_types_supported.htm#sprites">Sprite Particle Systems</a> are drawn in 2D screen coordinates, they will not be affected by the World, View, and Projection matrices, but it does not hurt to set them anyways if they will be mixed in with 3D particle systems. &nbsp;To set the transformation matrix for a Sprite particle system, you can set the <span style="font-family: 'Courier New'; color: #000000;">mcFireballParticleSystem.SpriteBatchSettings.TransformationMatrix</span> property.</p>
<p>&nbsp;</p>
<p>If you are using the <a href="particle_system_manager.htm">Particle System Manager</a> and want to draw all of the initialized particle systems, use the following code:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcParticleSystemManager.SetWorldViewProjectionMatricesForAllParticleSystems(mcWorldMatrix, mcViewMatrix, mcProjectionMatrix);</span></p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcParticleSystemManager.DrawAllParticleSystems();</span></p>
<p>&nbsp;</p>
<p>If DPSF is set to <a href="inherit_from_drawablegamecomponent.htm">inherit from DrawableGameComponent</a>, these function calls will not actually draw the particle system. &nbsp;The particle system will be updated when the base.Draw() function is called, as this is when all of the Game Components get drawn. &nbsp;However, having these function calls remain here will not cause any problems and will allow the particle systems to still be drawn if you set DPSF to not inherit from DrawableGameComponent, but you may remove them if you like.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Destroying the particle system</span></p>
<p>&nbsp;</p>
<p>When you are done with the particle system it may be destroyed using:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcFireballParticleSystem.Destroy();</span></p>
<p>&nbsp;</p>
<p>It is a good idea to destroy particle systems when they are not in use and you know they won't be used again for a while, as this will free all resources used by the particle system. &nbsp;This can free up a lot of memory, especially if the particle system has memory allocated for a large number of particles. &nbsp;When you are ready to use the particle system again, just re-initialize it. &nbsp;If the particle system is used frequently however you may want to just leave it initialized, as initializing and destroying particle systems allocates and de-allocates memory, which is expensive to do at run-time, especially if many (thousands or tens of thousands) of particles are allocated by the particle system.</p>
<p>&nbsp;</p>
<p>If you are using the <a href="particle_system_manager.htm">Particle System Manager</a> and want to destroy all of its particle systems, this can be done using:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcParticleSystemManager.DestroyAllParticleSystems();</span></p>
<p>&nbsp;</p>
<p>If you are completely done with the particle system all together and want to totally remove it you must set the variable to null, like so:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcFireballParticleSystem = </span><span style="font-family: 'Courier New'; color: #0000ff;">null</span><span style="font-family: 'Courier New'; color: #000000;">;</span></p>
<p>&nbsp;</p>
<p>However, if you had also added it to the particle system manager, before setting the variable to null you must also remove it from the particle system manager. &nbsp;You can do this using:</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #000000;">mcParticleSystemManager.RemoveParticleSystem(mcFireballParticleSystem);</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>For more examples of defining, updating, and drawing particle systems take a look at the GameMain.cs file included in the DPSF Demo source code.</p>
<p>&nbsp;</p>

</td></tr></table>

</body>
</html>
