<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>DPSF 1.5.4 to 2.0.0</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?dpsf_1_5_4_0_to_2_0_0_0.htm"; }
  else { parent.quicksync('a11.3'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">DPSF 1.5.4 to 2.0.0</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="introduction.htm">Top</a>&nbsp;
     <a href="dpsf_2_0_1_to_2_1_0.htm">Previous</a>&nbsp;
     <a href="dpsf_1_5_3_0_to_1_5_4_0.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p>First off, DPSF versions prior to version 2.0.0.0 only work with XNA 3.1. &nbsp;DPSF version 2.0.0.0 and higher use XNA 4.0. &nbsp;This means that you can only use DPSF version 2.0.0.0 and higher in Visual Studio 2010 or greater.</p>
<p>&nbsp;</p>
<p><span style="font-size: 12pt; font-weight: bold;">1 - Point Sprite and Pixel particle system types are gone</span></p>
<p>&nbsp;</p>
<p>XNA 4.0 removed Point Sprites and the PrimitiveType.PointList enumeration type, so DPSF can no longer support them either. &nbsp;As such, the Point Sprite and Pixel particle system types have been removed from DPSF. &nbsp;This means that the only particle types remaining in DPSF are Sprites (uses a SpriteBatch), Quads, Textured Quads, and No Display (not drawn to the screen).</p>
<p>&nbsp;</p>
<p><span style="font-size: 12pt; font-weight: bold;">1a - Converting a Point Sprite Particle System to a Textured Quad Particle System</span></p>
<p>If you were using a Point Sprite particle system, you will likely want to:</p>
<p>- change your particle systems from inheriting from the <span style="font-weight: bold;">DefaultPointSpriteParticleSystem</span> to instead inherit from the <span style="font-weight: bold;">DefaultTexturedQuadParticleSystem</span>.</p>
<p>- change the initialization function used to initialize the particle system class from <span style="font-weight: bold;">InitializePointSpriteParticleSystem</span> to <span style="font-weight: bold;">InitializeTexturedQuadParticleSystem</span>.</p>
<p>- change any instances of <span style="font-weight: bold;">DefaultPointSpriteParticle</span> to be <span style="font-weight: bold;">DefaultTexturedQuadParticle</span>.</p>
<p>- if you were using an event to trigger the <span style="font-weight: bold;">UpdateParticleSizeUsingLerp</span> function, change it to trigger the <span style="font-weight: bold;">UpdateParticleWidthAndHeightUsingLerp</span> function.</p>
<p>- if you were using particle rotation, you must change all of your previous float (i.e. scalar) rotation values to Vector3 rotation values. &nbsp;To do this simply set the particle's rotation to be a new Vector3, supplying zero for the X and Y components, and the previous rotation float for the Z component (since rotations in 2D are always around the Z axis (i.e. roll rotations)). &nbsp;The Orientation3D class also provides some 3D rotation helper functions if needed.</p>
<p>- add the following EveryTime event to your particle systems initialization: </p>
<p><span style="font-family: 'Consolas'; color: #000000;">ParticleEvents.AddEveryTimeEvent(UpdateParticleToFaceTheCamera, 200);</span></p>
<p>You may want to change the ExecutionOrder (i.e. 200) to something else if needed. &nbsp;This event should fire after any events that affect the particles' rotation/orientation.</p>
<p>- coinciding with the above point, each time the particle system is updated you will want to let it know the Camera's new position so that it can rotate the particles to face the camera, giving the illusion that the quads are actually point sprites. &nbsp;So before calling the ParticleSystem.Update() function, you will want to do:</p>
<p><span style="font-family: 'Consolas'; color: #000000;">mcParticleSystem.CameraPosition = sCameraPosition;</span></p>
<p>or if you are updating all of your particle systems at once using a Particle System Manager, then you will want to call the following function before calling the Particle System Manager's Update() function:</p>
<p><span style="font-family: 'Consolas'; color: #000000;">mcParticleSystemManager.SetCameraPositionForAllParticleSystems(sCameraPosition);</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 12pt; font-weight: bold;">1b - Converting a Pixel Particle System to a Quad Particle System</span></p>
<p>If you were using a Pixel particle system, you will likely want to:</p>
<p>- change your particle systems from inheriting from the <span style="font-weight: bold;">DefaultPixelParticleSystem</span> to instead inherit from the <span style="font-weight: bold;">DefaultQuadParticleSystem</span>.</p>
<p>- change the initialization function used to initialize the particle system class from <span style="font-weight: bold;">InitializePixelParticleSystem</span> to <span style="font-weight: bold;">InitializeQuadParticleSystem</span>.</p>
<p>- change any instances of <span style="font-weight: bold;">DefaultPixelParticle</span> to be <span style="font-weight: bold;">DefaultQuadParticle</span>.</p>
<p>- set the particle <span style="font-weight: bold;">Size</span> in the Particle Initialization Function; this should likely be something small, such as 0.3f.</p>
<p>- add the following EveryTime event to your particle systems initialization: </p>
<p><span style="font-family: 'Consolas'; color: #000000;">ParticleEvents.AddEveryTimeEvent(UpdateParticleToFaceTheCamera, 200);</span></p>
<p>You may want to change the ExecutionOrder (i.e. 200) to something else if needed. &nbsp;This event should fire after any events that affect the particles' rotation/orientation.</p>
<p>- coinciding with the above point, each time the particle system is updated you will want to let it know the Camera's new position so that it can rotate the particles to face the camera, giving the illusion that the quads are actually point sprites. &nbsp;So before calling the ParticleSystem.Update() function, you will want to do:</p>
<p><span style="font-family: 'Consolas'; color: #000000;">mcParticleSystem.CameraPosition = sCameraPosition;</span></p>
<p>or if you are updating all of your particle systems at once using a Particle System Manager, then you will want to call the following function before calling the Particle System Manager's Update() function:</p>
<p><span style="font-family: 'Consolas'; color: #000000;">mcParticleSystemManager.SetCameraPositionForAllParticleSystems(sCameraPosition);</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 12pt; font-weight: bold;">2 - Replaced InitializeRenderState() and ResetRenderState() virtual functions with InitializeRenderProperties()</span></p>
<p>&nbsp;</p>
<p>XNA 4.0 drastically changed the way the rendering properties are setup, and DPSF changed as well to accommodate this. &nbsp;The new philosophy in XNA 4.0 is that rather than changing the properties of the BlendState, DepthStencilState, RasterizerState, and SamplerState that the Graphics Device is using, you instead setup different instances of these objects and simply change the instance that the Graphics Device points to. &nbsp;This means that each DPSF particle system now contains its own instance of each of these objects. &nbsp;Before a DPSF particle system is drawn, it sets the Graphics Device to use its instances of the BlendState, DepthStencilState, RasterizerState, and SamplerState classes, which are all contained in the <span style="font-weight: bold;">RenderProperties</span> property of the DPSF particle system</p>
<p>&nbsp;</p>
<p>Before drawing anything in XNA 4.0 it is also considered best practice to explicitly set the Graphics Device's render properties, so that you can be sure your objects will be drawn correctly. &nbsp;Because of this, the ResetRenderState() function has been removed. &nbsp;So it is your responsibility to reset the Graphics Device's render properties before drawing anything after a DPSF particle system has been drawn.</p>
<p>&nbsp;</p>
<p>So in your code, what you need to change is:</p>
<p>- Replace the old overridden <span style="font-weight: bold;">InitializeRenderState</span>() function with the new overridden <span style="font-weight: bold;">InitializeRenderProperties</span>() function. &nbsp;In the InitializeRenderProperties() function you will want to access the particle systems <span style="font-weight: bold;">RenderProperties</span> property and setup the render properties however you ned.</p>
<p>- The InitializeRenderProperties() function only gets called once; when initializing the particle system; whereas the old InitializeRenderState() function used to get called every time the DPSF particle system was drawn, so you may have code in the old InitializeRenderState() function that you need to move into a new EveryTimeEvent function.</p>
<p>- Remove the old ResetRenderState() function.</p>
<p>&nbsp;</p>
<p>For an example of this you can take a look at just about any of the particle systems in the DPSF Demo, including the ExplosionFlash particle system.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 12pt; font-weight: bold;">3 - Wrap all [Serializable] attributes in "if (WINDOWS)" conditional compilation statements</span></p>
<p>&nbsp;</p>
<p>While the Xbox 360 never supported the [Serializable] attribute in XNA 3.1, it didn't cause any compiler errors either. &nbsp;In XNA 4.0 the [Serializable] attribute now causes compiler errors in Xbox 360 and Windows Phone projects. &nbsp;So anywhere that you have [Serializable] you will either need to delete the attribute, or change it to the following code so that it only gets included in Windows projects, and not Xbox or Windows Phone projects:</p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas'; color: #0000ff;">#if</span><span style="font-family: 'Consolas'; color: #000000;"> (WINDOWS)</span></p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Consolas'; color: #000000;">[</span><span style="font-family: 'Consolas'; color: #2b91af;">Serializable</span><span style="font-family: 'Consolas'; color: #000000;">]</span></p>
<p><span style="font-family: 'Consolas'; color: #0000ff;">#endif</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 12pt; font-weight: bold;">4 - Particles are not longer drawn in the correct order (depth sorting is not correct)</span></p>
<p>&nbsp;</p>
<p>If you had a particle system using textures with both opaque and (semi)transparent portions, and were previously using alpha testing, you may notice that they are not drawn in the correct order anymore. &nbsp;Since you cannot simply turn Alpha Testing on anymore in the XNA 4.0 BlendState, you have to either use the AlphaTest Effect (which DPSF doesn't by default), or sort the particles by depth before drawing them. &nbsp;To sort the particles by depth, DPSF now provides 2 functions built into the Quad particle systems;</p>
<p>&nbsp;</p>
<p>Particle EveryTimeEvent - <span style="font-family: 'Consolas'; font-weight: bold; color: #000000;">UpdateParticleDistanceFromCameraSquared</span></p>
<p>Particle System EveryTimeEvent - <span style="font-family: 'Consolas'; font-weight: bold; color: #000000;">UpdateParticleSystemToSortParticlesByDistanceFromCamera</span></p>
<p>&nbsp;</p>
<p>Using the AlphaTest Effect is less expensive (and thus better to use), but it will only provide proper results for textures that are masks; that have only fully opaque and fully transparent portions (i.e. no semi-transparent parts). &nbsp;If your textures have semi-transparent parts as well, you will want to use the depth sorting approach.</p>
<p>&nbsp;</p>
<p>For an example of how to use the AlphaTest Effect to properly draw the particles, see the AnimatedQuadPS particle system in the DPSF Demo. &nbsp;For examples of how to sort the particles using the distance from the camera in both Quad and Sprite particle systems, see the MultipleParticleImagesPS and AnimatedSpritePS particle systems respectively in the DPSF Demo.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 12pt; font-weight: bold;">5 - Now getting run-time errors when trying to draw Sprite particles, or color tinting is no longer applied to Sprite particles</span></p>
<p>&nbsp;</p>
<p>Sprite particle systems no longer default to using the custom DPSF effect; this allows it to run on the Windows Phone 7 without any changes. &nbsp;This means that your existing Sprite particle systems may encounter run-time errors when you try to draw them, as the default SpriteBatch effect has different parameters than the DPSF effect. &nbsp;For example, the default SpriteBatch effect does not have a "xColorBlendAmount" parameter. &nbsp;Also, if your Sprite particles were using the particle's Color attribute to change their color, then the color may no longer be the exact same as it was in prior versions, since the DPSF effect used the particle color in conjunction with the xColorBlendAmount parameter to determine the texture's final color.</p>
<p>&nbsp;</p>
<p>The custom DPSF effect can still be applied though by calling the function "SetEffectAndTechnique(DPSFDefaultEffect, DPSFDefaultEffectTechniques.Sprites.ToString());". &nbsp;The DPSF effect will only work however on Windows and the Xbox 360; the Windows Phone does not yet support custom shader effects.</p>
<p>&nbsp;</p>
<p>For an example of how to apply the DPSF effect to your Sprite particle systems again, check out the AnimatedSpritePS particle system in the DPSF Demo. &nbsp;To use the built-in SpriteBatch effect (so it will run on the Windows Phone), you should not need to do anything extra, and you should be able to remove the overridden SetEffectParameters() function. &nbsp;For an example of using the built-in SpriteBatch effect, see the SpritePS particle system in the DPSF Demo.</p>
<p>&nbsp;</p>

</td></tr></table>

</body>
</html>
