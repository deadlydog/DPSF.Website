<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>Tutorial 6 - Position, Orientaion, and Pivot Points</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?tutorial_6___position__orientation__and_pivot_points.htm"; }
  else { parent.quicksync('a12.7'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">Tutorial 6 - Position, Orientaion, and Pivot Points</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="introduction.htm">Top</a>&nbsp;
     <a href="tutorial_5___the_emitter.htm">Previous</a>&nbsp;
     <a href="tutorial_7___magnets.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p>We have already seen Position, Orientation, and Pivot Points in Tutorial 5 - The Emitter. &nbsp;In this tutorial, we will look at the classes that provide this functionality and show how they can be used for any objects, not just the Emitter.</p>
<p>&nbsp;</p>
<p>Load the Tutorial 6 project and open up Game1.cs.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Position, Velocity, and Acceleration</span></p>
<p>&nbsp;</p>
<p>The <span style="font-weight: bold;">Position2D</span> and <span style="font-weight: bold;">Position3D</span> classes provide position, velocity, and acceleration in 2 Dimensions and 3 Dimensions respectively. &nbsp;The Position3D class is used for the Emitter's <span style="font-weight: bold;">PositionData</span> property. &nbsp;When the Postion2D/3D <span style="font-weight: bold;">Update()</span> function is called, the Velocity is updated according to the Acceleration, and then the Position is updated according to the Velocity. &nbsp;You can use these classes for any object that you want to have a position, velocity, and acceleration associated with, not just particles.</p>
<p>&nbsp;</p>
<p>To use these classes, simply declare an instance of the class in your object's class. &nbsp;For example, the Emitter class declares and instantiates the PositionData variable, which is of the type Position3D. &nbsp;If you want your object to have an acceleration, set the Acceleration property. &nbsp;If you want it to have a velocity, set the Velocity property. &nbsp;From there just call the Update() function each frame, providing how much time has elapsed since the last frame as a parameter, then draw your object at the location specified by the Position property.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Orientation, Rotational Velocity, and Rotational Acceleration</span></p>
<p>&nbsp;</p>
<p>To make rotation calculations easy, DPSF provides the <span style="font-weight: bold;">Orientation2D</span> and <span style="font-weight: bold;">Orientation3D</span> classes. &nbsp;These classes provide properties and functions to specify Orientation, Rotational Velocity, and Rotational Acceleration. &nbsp;The Orientation2D class provides properties and functions to rotate 2 Dimensional objects. &nbsp;Because 2D objects always face the camera, they can only be rotated around the Z-axis (i.e. only roll rotations can be performed). &nbsp;This means that the Orientation, RotationalVelocity, and RotationalAcceleration are all expresses as singe float values. &nbsp;An Orientation value of zero means the object is not rotated at all, a value of Pi means it is rotated 180 degrees, and a value of 2*Pi means it is rotated 360 degrees.</p>
<p>&nbsp;</p>
<p>The Orientation3D class expresses the Orientation as a Quaternion, and the RotationalVelocity and RotationalAcceleration as Vector3s. &nbsp;As shown in Tutorial 5 - The Emitter, these properties can be set, and then the Orientation property can be updated accordingly by calling the Update() function each frame. &nbsp;In this tutorial, we show instead how to rotate a 3D object by using the static functions provided by the Orientation3D class. &nbsp;In this tutorial, the object we are rotating happens to be a particle in the particle system, but it could be any 3D object that expresses its orientation as a quaternion when using the Orientation3D class, and any object that expresses its orientation as a single float when using the Orientation2D class. &nbsp;Because we needed a 3D particle to do 3D rotations, a Textured Quad is used in this example instead of a Sprite, which would only allow 2D rotations.</p>
<p>&nbsp;</p>
<p>Near the very bottom of <span style="font-weight: bold;">Game1.cs</span>, Tutorial 6 shows how to update an object's orientation to rotate around the 3 axis about the object's center when the V, B, and N keys are pressed:</p>
<p>&nbsp;</p>
<p><span style="width:48px">&nbsp;</span><span style="font-family: 'Courier New'; color: #0000ff;">if</span><span style="font-family: 'Courier New';"> (KeyIsDown(</span><span style="font-family: 'Courier New'; color: #2b91af;">Keys</span><span style="font-family: 'Courier New';">.V))</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #008000;">// Rotate the Particle around the Y-axis about its center</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cParticle.Orientation = </span><span style="font-family: 'Courier New'; color: #2b91af;">Orientation3D</span><span style="font-family: 'Courier New';">.Rotate(</span><span style="font-family: 'Courier New'; color: #2b91af;">Matrix</span><span style="font-family: 'Courier New';">.CreateFromYawPitchRoll(0.1f, 0, 0), cParticle.Orientation);</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-family: 'Courier New';">}</span></p>
<p>&nbsp;</p>
<p><span style="width:48px">&nbsp;</span><span style="font-family: 'Courier New'; color: #0000ff;">if</span><span style="font-family: 'Courier New';"> (KeyIsDown(</span><span style="font-family: 'Courier New'; color: #2b91af;">Keys</span><span style="font-family: 'Courier New';">.B))</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-family: 'Courier New';">{</span></p>
<p><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #008000;">// Rotate the Particle around the X-axis about its center</span></p>
<p><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New';">cParticle.Orientation = </span><span style="font-family: 'Courier New'; color: #2b91af;">Orientation3D</span><span style="font-family: 'Courier New';">.Rotate(</span><span style="font-family: 'Courier New'; color: #2b91af;">Matrix</span><span style="font-family: 'Courier New';">.CreateFromYawPitchRoll(0, 0.1f, 0), cParticle.Orientation);</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-family: 'Courier New';">}</span></p>
<p>&nbsp;</p>
<p><span style="width:48px">&nbsp;</span><span style="font-family: 'Courier New'; color: #0000ff;">if</span><span style="font-family: 'Courier New';"> (KeyIsDown(</span><span style="font-family: 'Courier New'; color: #2b91af;">Keys</span><span style="font-family: 'Courier New';">.N))</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-family: 'Courier New';">{</span></p>
<p><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New'; color: #008000;">// Rotate the Particle around the Z-axis about its center</span></p>
<p><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-family: 'Courier New';">cParticle.Orientation = </span><span style="font-family: 'Courier New'; color: #2b91af;">Orientation3D</span><span style="font-family: 'Courier New';">.Rotate(</span><span style="font-family: 'Courier New'; color: #2b91af;">Matrix</span><span style="font-family: 'Courier New';">.CreateFromYawPitchRoll(0, 0, 0.1f), cParticle.Orientation);</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-family: 'Courier New';">}</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Pivot Points, Pivot Rotational Velocity, and Pivot Rotational Acceleration</span></p>
<p>&nbsp;</p>
<p>To make rotations around a pivot point easy, DPSF provides the <span style="font-weight: bold;">PivotPoint2D</span> and <span style="font-weight: bold;">PivotPoint3D</span> classes. &nbsp;These classes provide properties and functions to specify a Pivot Point (an arbitrary point in space) to rotate around, as well as a Pivot Rotational Velocity and Pivot Rotational Acceleration, which indicates how fast to rotate around the PivotPoint. &nbsp;In addition to rotating the object around the pivot point, the classes provide functions and properties to update the object's orientation as well, so you can have an object's orientation rotate as it rotates around the pivot point, or simply just update the object's position as it rotates around the pivot point.</p>
<p>&nbsp;</p>
<p>Near the very bottom of <span style="font-weight: bold;">Game1.cs</span>, Tutorial 6 shows how to update an object's position to rotate around the pivot point when the A, S, and D keys are pressed:</p>
<p>&nbsp;</p>
<p><span style="width:48px">&nbsp;</span><span style="font-family: 'Courier New'; color: #0000ff;">if</span><span style="font-family: 'Courier New';"> (KeyIsDown(</span><span style="font-family: 'Courier New'; color: #2b91af;">Keys</span><span style="font-family: 'Courier New';">.A))</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #008000;">// Rotate the Particle around the Y-axis, without changing its Orientation</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp;   &nbsp; &nbsp; &nbsp; &nbsp;cParticle.Position = </span><span style="font-family: 'Courier New'; color: #2b91af;">PivotPoint3D</span><span style="font-family: 'Courier New';">.RotatePosition(</span><span style="font-family: 'Courier New'; color: #2b91af;">Matrix</span><span style="font-family: 'Courier New';">.CreateFromYawPitchRoll(0.05f, 0, 0), msPivotPoint, cParticle.Position);</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp;}</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #0000ff;">if</span><span style="font-family: 'Courier New';"> (KeyIsDown(</span><span style="font-family: 'Courier New'; color: #2b91af;">Keys</span><span style="font-family: 'Courier New';">.S))</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp;   &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="font-family: 'Courier New'; color: #008000;">// Rotate the Particle around the X-axis, without changing its Orientation</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cParticle.Position = </span><span style="font-family: 'Courier New'; color: #2b91af;">PivotPoint3D</span><span style="font-family: 'Courier New';">.RotatePosition(</span><span style="font-family: 'Courier New'; color: #2b91af;">Matrix</span><span style="font-family: 'Courier New';">.CreateFromYawPitchRoll(0, 0.05f, 0), msPivotPoint, cParticle.Position);</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp;}</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #0000ff;">if</span><span style="font-family: 'Courier New';"> (KeyIsDown(</span><span style="font-family: 'Courier New'; color: #2b91af;">Keys</span><span style="font-family: 'Courier New';">.D))</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp;   &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="font-family: 'Courier New'; color: #008000;">// Rotate the Particle around the Z-axis, without changing its Orientation</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cParticle.Position = </span><span style="font-family: 'Courier New'; color: #2b91af;">PivotPoint3D</span><span style="font-family: 'Courier New';">.RotatePosition(</span><span style="font-family: 'Courier New'; color: #2b91af;">Matrix</span><span style="font-family: 'Courier New';">.CreateFromYawPitchRoll(0, 0, 0.05f), msPivotPoint, cParticle.Position);</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp;}</span></p>
<p>&nbsp;</p>
<p>And below that it shows how to update an object's position and orientation to rotate around the pivot point when the T, Y, and U keys are pressed:</p>
<p>&nbsp;</p>
<p><span style="width:48px">&nbsp;</span><span style="font-family: 'Courier New'; color: #0000ff;">if</span><span style="font-family: 'Courier New';"> (KeyIsDown(</span><span style="font-family: 'Courier New'; color: #2b91af;">Keys</span><span style="font-family: 'Courier New';">.T))</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp;   &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="font-family: 'Courier New'; color: #008000;">// Rotate the Particle around the Y-axis, changing its Position and Orientation</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #2b91af;">PivotPoint3D</span><span style="font-family: 'Courier New';">.RotatePositionAndOrientation(</span><span style="font-family: 'Courier New'; color: #2b91af;">Matrix</span><span style="font-family: 'Courier New';">.CreateFromYawPitchRoll(0.05f, 0, 0), msPivotPoint, </span><span style="font-family: 'Courier New'; color: #0000ff;">ref</span><span style="font-family: 'Courier New';"> cParticle.Position, </span><span style="font-family: 'Courier New'; color: #0000ff;">ref</span><span style="font-family: 'Courier New';"> cParticle.Orientation);</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp;}</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #0000ff;">if</span><span style="font-family: 'Courier New';"> (KeyIsDown(</span><span style="font-family: 'Courier New'; color: #2b91af;">Keys</span><span style="font-family: 'Courier New';">.Y))</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp;   &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="font-family: 'Courier New'; color: #008000;">// Rotate the Particle around the X-axis, changing its Position and Orientation</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #2b91af;">PivotPoint3D</span><span style="font-family: 'Courier New';">.RotatePositionAndOrientation(</span><span style="font-family: 'Courier New'; color: #2b91af;">Matrix</span><span style="font-family: 'Courier New';">.CreateFromYawPitchRoll(0, 0.05f, 0), msPivotPoint, </span><span style="font-family: 'Courier New'; color: #0000ff;">ref</span><span style="font-family: 'Courier New';"> cParticle.Position, </span><span style="font-family: 'Courier New'; color: #0000ff;">ref</span><span style="font-family: 'Courier New';"> cParticle.Orientation);</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp;}</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #0000ff;">if</span><span style="font-family: 'Courier New';"> (KeyIsDown(</span><span style="font-family: 'Courier New'; color: #2b91af;">Keys</span><span style="font-family: 'Courier New';">.U))</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp;   &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="font-family: 'Courier New'; color: #008000;">// Rotate the Particle around the Z-axis, changing its Position and Orientation</span></p>
<p><span style="font-family: 'Courier New';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Courier New'; color: #2b91af;">PivotPoint3D</span><span style="font-family: 'Courier New';">.RotatePositionAndOrientation(</span><span style="font-family: 'Courier New'; color: #2b91af;">Matrix</span><span style="font-family: 'Courier New';">.CreateFromYawPitchRoll(0, 0, 0.05f), msPivotPoint, </span><span style="font-family: 'Courier New'; color: #0000ff;">ref</span><span style="font-family: 'Courier New';"> cParticle.Position, </span><span style="font-family: 'Courier New'; color: #0000ff;">ref</span><span style="font-family: 'Courier New';"> cParticle.Orientation);</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-family: 'Courier New';">}</span></p>
<p>&nbsp;</p>
<p>If you are using actual instances of the PivotPoint2D or PivotPoint3D classes in an object's properties (not just calling their static functions to rotate an external object), then you can specify if the orientation should be rotated as well by setting the <span style="font-weight: bold;">RotateOrientationToo</span> property.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;">Remarks</span></p>
<p>&nbsp;</p>
<p>Quaternions are used instead of Matrices for 3D orientation because they avoid the problem of gimbal lock. &nbsp;Conveniently enough, XNA's Quaternion and Matrix classes provide functions to transform one into another, so if you are more comfortable using rotation matrices, they can easily be converted into a quaternion and vice versa.</p>
<p>&nbsp;</p>
<p>For specific information on these classes' functions and properties see the <a href="dpsf_api_documentation.htm">DPSF API Documentation</a></p>

</td></tr></table>

</body>
</html>
